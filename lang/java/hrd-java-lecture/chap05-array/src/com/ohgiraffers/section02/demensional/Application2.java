package com.ohgiraffers.section02.demensional;

public class Application2 {
    public static void main(String[] args) {
        int[][] iarr = new int[3][5]; //길이 5의 배열을 3개 할당하고 그 주소를 묶어 관리하는 배열의 주소를 stack의 iarr에 저장한다.
        /* 값 대입 */
        /* 배열 인덱스를 하나씩 증가시키며 0번째 인덱스부터 마지막 번째 인덱스까지 차례로 인덱스를 증가시키며 공간에 접근한다.
         * 접근한 뒤 1부터 1씩 증가하는 값을 이용해서 차례로 값을 대입하고,
         * 모든 인덱스에 값을 다 대입하면 다음 배열의 0번 인덱스부터 다시 접근을 시작하여,
         * 배열의 갯수만큼을 반복적으로 접하며 값을 대입한다.
         * */
        /* 배열에 저장하기 위한 하나씩 증가하는 값을 저장할 변수 */
        int value = 1;
        /* 배열의 갯수 만큼 반복적으로 접근하기 위한 용도의 반복문 */
        for (int i = 0; i < iarr.length; i++) {
            /* 하나의 배열의 0번 부터 마지막 인덱스까지 차례로 접근해서 값을 대입하는 용도의 반복문 */
            for (int j = 0; j < iarr[i].length; j++) {
                iarr[i][j] = value++;
            }
        }
        /* 값 출력 */
        /* 0부터 1씩 증가하며 마지막 인덱스까지 배열의 값을 하나씩 출력하고
         * 모든 인덱스의 값을 출력하고 나면 다음 배열도 순차적으로 접근해서 값을 출력하면서
         * 매 배열의 값을 다 출력할 때 마다 한 줄씩 라인을 바꿔주는 행위를 배열의 갯수만큼 반복하고 있다.
         * */
        /* 배열의 갯수만큼 배열에 하나씩 반복적으로 접근하기 위한 용도의 반복문 */
        for (int i = 0; i < iarr.length; i++) {
            /* 각 배열에 접근했을 때 해당 배열의 값을 처음 인덱스부터 차례로 접근하며 출력해주는 반복문 */
            for (int j = 0; j < iarr[i].length; j++) {
                System.out.print(iarr[i][j] + " ");
            }
            System.out.println();
        }
    }
}













